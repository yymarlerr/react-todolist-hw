{"version":3,"sources":["Components/App/App.js","index.js"],"names":["Wrapper","styled","div","Title","h1","TodoContainer","Buttons","TodoItem","props","isDone","Button","button","TextInput","input","InputContainer","Status","All","active","Unfinished","Completed","ErrorMessage","ClearAll","EditTodo","Todo","className","todo","handleDeleteTodo","handleIsDone","handleUpdateTodo","setErrormessage","useState","edit","setEdit","content","value","placeholder","onKeyPress","e","key","target","id","onChange","onClick","saveItemsToLocalStorage","todos","localStorage","setItem","JSON","stringify","App","useRef","todoData","getItem","parse","length","current","setTodos","setValue","errorMessage","todoStatus","setTodoStatus","useEffect","filter","map","cb","removeItem","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af0555b3.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport PropTypes from 'prop-types'\n\nconst Wrapper = styled.div`\n  border: 1px solid lightgrey;\n  width: 600px;\n  margin: 50px auto;\n  padding-bottom: 30px;\n  border-radius: 5px;\n`\n\nconst Title = styled.h1`\n  text-align: center;\n`;\n\nconst TodoContainer = styled.div`\n  display: flex;\n  padding: 10px;\n  max-width: 500px;\n  background: lightblue;\n  margin: 5px auto;\n  border-radius: 5px;\n  align-items: center;\n  justify-content: space-between;\n`;\nconst Buttons = styled.div``;\n\nconst TodoItem = styled.div`\n  &:hover {\n    color: #666;\n  }\n\n  ${(props) => props.isDone &&`\n    color: #666;\n    text-decoration: line-through;\n  `} \n\n`;\n\nconst Button = styled.button`\n  cursor: pointer;\n  border-radius: 5px;\n  margin-left: 1px;\n  background: #F5F9FE;\n  border: 1px lightgrey solid;\n\n  & + & {\n    margin-left: 5px;\n  }\n`;\n\nconst TextInput = styled.input`\n  display: flex;\n  width: 300px;\n  height: 30px;\n  text-align: center;\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px;\n`\n\nconst Status = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n`\n\nconst All = styled.button`\n  border: 1px solid lightgrey;\n  padding: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n  margin: 5px;\n\n  ${(props) => props.active &&`\n    background-color: #666;\n    color: white;\n  `}\n`\nconst Unfinished = styled.button`\n  border: 1px solid lightgrey;\n  padding: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n  margin: 5px;\n`\nconst Completed = styled.button`\n  border: 1px solid lightgrey;\n  padding: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n  margin: 5px;\n`\n\nconst ErrorMessage = styled.div`\n  color: red;\n  font-size: 12px;\n  text-align: center;\n`\n\nconst ClearAll = styled.button`\n  background: white;\n  border: 1px #666 solid;\n  border-radius: 5px;\n  margin-right: 5px;\n  cursor: pointer;\n`\n\nconst EditTodo = styled.input`\n  border: 1px solid #666;\n  border-radius: 5px;\n  height: 20px;\n`\n\nfunction Todo({ className, todo, handleDeleteTodo, handleIsDone, handleUpdateTodo, setErrormessage }) {\n  const [edit, setEdit] = useState(false)\n\n  return (\n    <TodoContainer className={className}>\n      {(!edit) &&\n      <TodoItem isDone={todo.isDone} >{\n        todo.content}\n      </TodoItem>\n      }\n      {(edit) && \n        <EditTodo \n          value={edit} \n          placeholder={todo.content} \n          onKeyPress={(e) => { \n            if (e.key === \"Enter\") {\n              if (!e.target.value) return setErrormessage(\"請輸入內容\")\n              handleUpdateTodo(todo.id, edit, () => { setEdit(\"\")}) \n              setErrormessage(\"\")\n            }} \n          } \n          onChange={(e) => { setEdit(e.target.value) }}\n        >\n        </EditTodo>\n      }\n      <Buttons>\n        <Button onClick={() => { handleIsDone(todo.id) }}>\n          {(todo.isDone) ? \"未完成\" : \"完成\"}\n        </Button>\n        <Button onClick={() => { handleDeleteTodo(todo.id) }}>\n          刪除\n        </Button>\n        <Button onClick={() => { setEdit([]) }}>\n          編輯\n        </Button>\n      </Buttons>\n    </TodoContainer>\n  );\n}\n\nfunction saveItemsToLocalStorage(todos) {\n  localStorage.setItem(\"todos\", JSON.stringify(todos))\n}\n\nfunction App() {\n  const id = useRef(1)\n  const [todos, setTodos] = useState(() => {\n    let todoData = localStorage.getItem(\"todos\") || \"\"\n    if (todoData) {\n      todoData = JSON.parse(todoData)\n      if (todoData.length) {\n        id.current = todoData[0].id + 1\n      }\n    } else {\n      todoData = []\n    }\n    return todoData\n  })\n  const [value, setValue] = useState()\n  const [errorMessage, setErrormessage] = useState(\"\")\n  const [todoStatus, setTodoStatus] = useState(todos)\n  \n  useEffect(() => { \n    saveItemsToLocalStorage(todos)\n    setTodoStatus(todos)\n  }, [todos])\n\n  // 新增 todo\n  const handleAddTodo = () => {\n    if (!value) {\n      return setErrormessage(\"請輸入資料\")\n    }\n    if (todos) {\n      setTodos([{\n        id: id.current,\n        content: value,\n        isDone: false\n      },\n      ...todos])\n        saveItemsToLocalStorage(todos)\n    } else {\n      id.current = 1\n      setTodos([{\n        id: id.current,\n        content: value,\n        isDone: false\n      }])\n      saveItemsToLocalStorage(todos)\n    }\n    setValue(\"\")\n    id.current++\n  }\n  \n  // 刪除 todo\n  const handleDeleteTodo = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id\n    ))\n  }\n\n  // 刪除全部\n  const handleDeleteAll = () => {\n    localStorage.removeItem(\"todos\")\n    setTodos([])\n  }\n\n  // 標示完成、未完成\n  const handleIsDone = (id) => {\n    setTodos(todos.map(todo => {\n      if (todo.id === id) {\n        return (\n          {\n            ...todo,\n            isDone: !todo.isDone\n          }\n        )\n      }\n      return todo\n    }))\n  }\n  \n  // 更改狀態\n  const handleStatusToAll = () => {\n    setTodoStatus(todos)\n  }\n  \n  const handleStatusToUnfinished = () => {\n    setTodoStatus(todos.filter(todo => todo.isDone === false))\n  }\n\n  const handleStatusToCompleted = () => {\n    setTodoStatus(todos.filter(todo => todo.isDone === true))\n  }\n\n  // 編輯 todo\n  const handleUpdateTodo = (id, content, cb) => {\n    setTodos(todos.map(todo => {\n      if (todo.id === id) {\n        return (\n          {\n            ...todo,\n            content\n          }\n        )\n      }\n      return todo\n    }))\n    cb()\n  }\n\n\n  return (\n    <Wrapper>\n      <Title>TodoList</Title>\n      <InputContainer>\n        <ClearAll onClick={handleDeleteAll}>Clear All</ClearAll>\n        <TextInput\n          type=\"text\"\n          placeholder=\"write something...\"\n          value={value}\n          onChange={(e) => { \n            setValue(e.target.value)\n            setErrormessage(\"\")\n          }} \n        />\n        <Button onClick={handleAddTodo} >Add Todo</Button>\n      </InputContainer>\n      {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage> }\n        {(todos && !todoStatus) &&\n          todos.map(todo => (\n            <Todo \n            todo={todo}\n            key={todo.id}\n            handleDeleteTodo={handleDeleteTodo}\n            handleIsDone={handleIsDone}\n            handleUpdateTodo={handleUpdateTodo}\n            setErrormessage={setErrormessage}\n            />\n          ))\n        }\n        {(todoStatus) &&\n          todoStatus.map(todo => (\n            <Todo \n            todo={todo}\n            key={todo.id}\n            handleDeleteTodo={handleDeleteTodo}\n            handleIsDone={handleIsDone}\n            handleUpdateTodo={handleUpdateTodo}\n            setErrormessage={setErrormessage}\n            />\n          ))\n        }\n      <Status>\n        <All onClick={handleStatusToAll} >全部</All>\n        <Unfinished onClick={handleStatusToUnfinished} >未完成</Unfinished>\n        <Completed onClick={handleStatusToCompleted} >完成</Completed>\n      </Status>\n    </Wrapper>\n  );\n}\n\nexport default App;\n\nTodo.propTypes = {\n  className: PropTypes.string,\n  size: PropTypes.string,\n  todo: PropTypes.object,\n  handleDeleteTodo: PropTypes.func,\n  handleToggleIsDone: PropTypes.func\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}